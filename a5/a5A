Assignment 5 (CS 354)
Name: Kah Jing Lee (Section 1)
Partner's Name: Ter Chrng Ng (Section 2)







1)
div  $8, $9, $10	=>	div  $9, $10  # final synthesis
				        mflo  $8 

move  $14, $10	    =>	add  $14, $10, $0  # final synthesis

sw  $8, intvariable	=>	la  $8, intvariable	=>	lui  $1, 0x0040  # final synthesis
				        sw  $8, 0($8)			ori  $1, $1, 0xabc0
								                sw  $8, 0($1)

puts $12		    =>	li  $2, 4		    =>	addi  $2, $0, 4  # final synthesis
				        move  $4, $12		    add  $4, $12, $0
				        syscall			        syscall








2)
blez   $20, end_loop
The instruction is at address 0x00820468. The address for label end_loop is assigned to be 0x00820494. 
So, 
byte difference = target address - (branch address + 4)

branch address + 4 = 0x0082046c  (or 0000 0000 1000 0010 0000 0100 0110 1100 in binary)

Convert it into 2's complement to perform subtraction: (Inverse the '1' and '0' and add 1)
1111 1111 0111 1101 1111 1011 1001 0100

Byte difference:
	        0000 0000 1000 0010 0000 0100 1001 0100
         +  1111 1111 0111 1101 1111 1011 1001 0100
          1 0000 0000 0000 0000 0000 0000 0010 1000 

Hex: 0x28

Machine code in hex: 	0x1a800028

Machine code in binary:  0001 1010 1000 0000 0000 0000 0010 1000











3)
PART A)
byte difference = target address - (branch address + 4)

branch address + 4 = 0x00800030  (or 0000 0000 1000 0000 0000 0000 0011 0000 in binary)

Convert it into 2's complement to perform subtraction: (Inverse the '1' and '0' and add 1)
1111 1111 0111 1111 1111 1111 1101 0000

Byte difference:
	        0000 0100 1100 0000 0000 0000 1010 0000
         +  1111 1111 0111 1111 1111 1111 1101 0000
          1 0000 0100 0100 0000 0000 0000 0111 0000 

Hex: 0x04400070

Since the offset field in bgez is only 16 bits long (or after two ‘0’ at the end being concatenated, 18 bits long), it does not represent the whole number of the offset. Thus, bgez can only fits in part of the offset and could not reach the final location intended. 

PART B)

bgez $16, error_in_input_i
jal no_error
error_in_input_i:
    lui $8, 0xMS part of error_in_input 
    ori $8, $8, 0xLS part of error_in_input
    jr $8
no_error:
    <more code here>

Basically, we have to load the targeted address into a register so that jr can jump to it, and more code to make sure that the flow in uninterrupted (jal no_error)
